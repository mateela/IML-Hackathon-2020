    @classmethod
    def build(cls, context, prop):
        verify_facemaps_for_object(context.object)
        me = get_edit_mesh()
        bm = bmesh.from_edit_mesh(me)
        faces = [face for face in bm.faces if face.select]

        if cls.validate(faces):
            cls.add_window_facemaps()
            if create_window(bm, faces, prop):
                bmesh.update_edit_mesh(me, True)
                return {"FINISHED"}
        return {"CANCELLED"}

    @classmethod
    def add_window_facemaps(cls):
        groups = FaceMap.WINDOW, FaceMap.FRAME
        add_facemap_for_groups(groups)

    @classmethod
    def validate(cls, faces):
        if faces:
            if not any([round(f.normal.z, 1) for f in faces]):
                return True
        return False
import bpy
from .window import Window
from .window_props import WindowProperty
from ...utils import get_selected_face_dimensions


class BTOOLS_OT_add_window(bpy.types.Operator):
    """Create window from selected faces"""

    bl_idname = "btools.add_window"
    bl_label = "Add Window"
    bl_options = {"REGISTER", "UNDO"}

    props: bpy.props.PointerProperty(type=WindowProperty)

    @classmethod
    def poll(cls, context):
        return context.object is not None and context.mode == "EDIT_MESH"

    def execute(self, context):
        self.props.init(get_selected_face_dimensions(context))
        return Window.build(context, self.props)

    def draw(self, context):
        self.props.draw(context, self.layout)
import bpy
from .fill_props import FillBars, FillPanel, FillLouver, FillGlassPanes
from .fill_types import fill_bar, fill_panel, fill_louver, fill_glass_panes, FillUser

classes = (FillBars, FillPanel, FillLouver, FillGlassPanes)


def register_fill():
    for cls in classes:
        bpy.utils.register_class(cls)


def unregister_fill():
    for cls in classes:
        bpy.utils.unregister_class(cls)
import bpy
from bpy.props import IntProperty, FloatProperty


class FillPanel(bpy.types.PropertyGroup):

    panel_count_x: IntProperty(
        name="Horizontal Panels",
        min=0,
        max=100,
        default=1,
        description="Number of horizontal panels",
    )

    panel_count_y: IntProperty(
        name="Vertical Panels",
        min=0,
        max=100,
        default=1,
        description="Number of vertical panels",
    )

    panel_border_size: FloatProperty(
        name="Panel Border",
        min=0.01,
        max=1.0,
        default=0.1,
        description="Border for panels",
    )

    panel_margin: FloatProperty(
        name="Panel Margin",
        min=0.01,
        max=1.0,
        default=0.1,
        description="Margins of each panel",
    )

    panel_depth: FloatProperty(
        name="Panel Depth",
        min=0.01,
        max=100.0,
        default=0.01,
        step=1,
        description="Depth of panels",
    )

    def draw(self, layout):
        box = layout.box()

        col = box.column(align=True)
        row = col.row(align=True)
        row.prop(self, "panel_count_x")
        row.prop(self, "panel_count_y")
        col.prop(self, "panel_border_size")
        col.prop(self, "panel_margin")
        col.prop(self, "panel_depth")


class FillGlassPanes(bpy.types.PropertyGroup):
    pane_count_x: IntProperty(
        name="Horizontal glass panes",
        min=0,
        max=10,
        default=1,
        description="Number of horizontal glass panes",
    )

    pane_count_y: IntProperty(
        name="Vertical glass panes",
        min=0,
        max=10,
        default=1,
        description="Number of vertical glass panes",
    )

    pane_margin: FloatProperty(
        name="Glass Pane Margin",
        min=0.01,
        max=1.0,
        default=0.1,
        description="Margin of glass pane frames",
    )

    pane_depth: FloatProperty(
        name="Glass Pane Depth",
        min=0.0,
        max=0.1,
        default=0.01,
        step=0.1,
        description="Depth of glass panes",
    )

    def draw(self, box):

        col = box.column(align=True)
        row = col.row(align=True)
        row.prop(self, "pane_count_x")
        row.prop(self, "pane_count_y")
        col.prop(self, "pane_margin", slider=True)
        col.prop(self, "pane_depth", slider=True)


class FillLouver(bpy.types.PropertyGroup):
    louver_count: IntProperty(
        name="Louver Count",
        min=0,
        max=1000,
        default=10,
        description="Number of louvers on to create face",
    )

    louver_margin: FloatProperty(
        name="Louver Margin",
        min=0.0,
        max=100.0,
        default=0.1,
        step=1,
        description="Offset of louvers from face border",
    )

    louver_depth: FloatProperty(
        name="Louver Depth",
        min=0.01,
        max=100.0,
        default=0.05,
        step=1,
        description="Depth of each louver",
    )

    louver_border: FloatProperty(
        name="Louver Border",
        min=0.0,
        max=1.0,
        default=0.01,
        step=1,
        description="Distance between louvers",
    )

    def draw(self, box):

        box.prop(self, "louver_margin")

        col = box.column(align=True)
        col.prop(self, "louver_count")
        col.prop(self, "louver_depth")
        col.prop(self, "louver_border")


class FillBars(bpy.types.PropertyGroup):
    bar_count_x: IntProperty(
        name="Horizontal Bars",
        min=0,
        max=100,
        default=1,
        description="Number of horizontal bars",
    )

    bar_count_y: IntProperty(
        name="Vertical Bars",
        min=0,
        max=100,
        default=1,
        description="Number of vertical bars",
    )

    bar_width: FloatProperty(
        name="Bar Width", min=0.01, max=100.0, default=0.1, description="Width of bars"
    )

    bar_depth: FloatProperty(
        name="Bar Depth",
        min=0.01,
        max=100.0,
        default=0.1,
        step=1,
        description="Depth of bars",
    )

    def draw(self, box):

        col = box.column(align=True)
        row = col.row(align=True)
        row.prop(self, "bar_count_x")
        row.prop(self, "bar_count_y")
        col.prop(self, "bar_width")
        col.prop(self, "bar_depth")
import bmesh
from enum import Enum, auto
from mathutils import Vector, Matrix
from bmesh.types import BMEdge, BMVert
from ...utils import (
    FaceMap,
    validate,
    filter_geom,
    map_new_faces,
    add_faces_to_map,
    calc_edge_median,
    calc_face_dimensions,
    filter_vertical_edges,
    filter_horizontal_edges,
)


class FillUser(Enum):
    DOOR = auto()
    WINDOW = auto()


@map_new_faces(FaceMap.FRAME, skip=FaceMap.DOOR_PANELS)
def fill_panel(bm, face, prop):
    """Create panels on face
    """
    if prop.panel_count_x + prop.panel_count_y == 0:
        return

    bmesh.ops.inset_individual(bm, faces=[face], thickness=prop.panel_border_size)
    quads = subdivide_face_into_quads(bm, face, prop.panel_count_x, prop.panel_count_y)
    bmesh.ops.inset_individual(bm, faces=quads, thickness=prop.panel_margin / 2)
    bmesh.ops.translate(
        bm,
        verts=list({v for f in quads for v in f.verts}),
        vec=face.normal * prop.panel_depth,
    )
    add_faces_to_map(bm, quads, FaceMap.DOOR_PANELS)


def fill_glass_panes(bm, face, prop, user=FillUser.DOOR):
    """Create glass panes on face
    """
    if prop.pane_count_x + prop.pane_count_y == 0:
        return

    userframe = FaceMap.DOOR_PANES if user == FillUser.DOOR else FaceMap.WINDOW_PANES
    bmesh.ops.inset_individual(bm, faces=[face], thickness=0.0001) # to isolate the working quad and not leave adjacent face as n-gon
    quads = subdivide_face_into_quads(bm, face, prop.pane_count_x, prop.pane_count_y)

    inset = map_new_faces(userframe)(bmesh.ops.inset_individual)
    inset(bm, faces=quads, thickness=prop.pane_margin, depth=-prop.pane_depth)

    usergroup = FaceMap.DOOR if user == FillUser.DOOR else FaceMap.WINDOW
    add_faces_to_map(bm, quads, usergroup)


@map_new_faces(FaceMap.WINDOW_BARS)
def fill_bar(bm, face, prop):
    """Create horizontal and vertical bars along a face
    """
    try:
        width, height = calc_face_dimensions(face)
    except IndexError:
        # -- face is too small / has no width or height after sizeoffset prop adjusted
        return
    face_center = face.calc_center_median()

    # -- horizontal
    offset = height / (prop.bar_count_x + 1)
    for i in range(prop.bar_count_x):
        scale = (1, 1, prop.bar_width / height)
        position = Vector((face.normal * prop.bar_depth / 2)) + Vector(
            (0, 0, -height / 2 + (i + 1) * offset)
        )
        depth = -face.normal * prop.bar_depth / 2
        create_bar_from_face(bm, face, face_center, position, scale, depth)

    # -- vertical
    eps = 0.015
    offset = width / (prop.bar_count_y + 1)
    for i in range(prop.bar_count_y):
        scale = (prop.bar_width / width, prop.bar_width / width, 1)
        perp = face.normal.cross(Vector((0, 0, 1)))
        position = Vector((face.normal * ((prop.bar_depth / 2) - eps))) + perp * (
            -width / 2 + ((i + 1) * offset)
        )
        depth = -face.normal * ((prop.bar_depth / 2) - eps)
        create_bar_from_face(bm, face, face_center, position, scale, depth, True)


def fill_louver(bm, face, prop, user=FillUser.DOOR):
    """Create louvers from face
    """
    normal = face.normal.copy()
    if prop.louver_margin:
        inset = map_new_faces(FaceMap.FRAME)(bmesh.ops.inset_individual)
        inset(bm, faces=[face], thickness=prop.louver_margin)

    segments = double_and_make_even(prop.louver_count)
    faces = subdivide_face_into_vertical_segments(bm, face, segments)
    faces.sort(key=lambda f: f.calc_center_median().z)
    louver_faces = faces[1::2]

    # -- scale to border
    for face in louver_faces:
        bmesh.ops.scale(
            bm,
            vec=(1, 1, 1 + prop.louver_border),
            verts=face.verts,
            space=Matrix.Translation(-face.calc_center_median()),
        )

    usergroup = [FaceMap.WINDOW_LOUVERS, FaceMap.DOOR_LOUVERS][user == FillUser.DOOR]
    extrude = map_new_faces(usergroup)(extrude_faces_add_slope)
    extrude(bm, louver_faces, normal, prop.louver_depth)
    add_faces_to_map(bm, validate(faces[::2]), usergroup)


def subdivide_face_into_quads(bm, face, cuts_x, cuts_y):
    """subdivide a face(quad) into more quads
    """
    v_edges = filter_vertical_edges(face.edges, face.normal)
    h_edges = filter_horizontal_edges(face.edges, face.normal)

    edges = []
    if cuts_x > 0:
        res = bmesh.ops.subdivide_edges(bm, edges=v_edges, cuts=cuts_x)
        edges.extend(filter_geom(res["geom_inner"], BMEdge))

    if cuts_y > 0:
        res = bmesh.ops.subdivide_edges(bm, edges=h_edges + edges, cuts=cuts_y)
        edges.extend(filter_geom(res["geom_inner"], BMEdge))
    bmesh.ops.remove_doubles(bm, verts=bm.verts, dist=0.01)
    return list({f for ed in validate(edges) for f in ed.link_faces})


def duplicate_face_translate_scale(bm, face, position, scale, scale_center):
    """Duplicate a face and transform it
    """
    ret = bmesh.ops.duplicate(bm, geom=[face])
    verts = filter_geom(ret["geom"], BMVert)

    bmesh.ops.scale(bm, verts=verts, vec=scale, space=Matrix.Translation(-scale_center))
    bmesh.ops.translate(bm, verts=verts, vec=position)
    return ret


def extrude_edges_to_depth(bm, edges, depth):
    """Extrude edges only and translate
    """
    ext = bmesh.ops.extrude_edge_only(bm, edges=edges)
    bmesh.ops.translate(bm, verts=filter_geom(ext["geom"], BMVert), vec=depth)


def extrude_faces_add_slope(bm, faces, extrude_normal, extrude_depth):
    """Extrude faces and move top edge back to form a wedge
    """
    res = bmesh.ops.extrude_discrete_faces(bm, faces=faces)
    bmesh.ops.translate(
        bm,
        vec=extrude_normal * extrude_depth,
        verts=list({v for face in res["faces"] for v in face.verts}),
    )

    for face in res["faces"]:
        top_edge = max(
            filter_horizontal_edges(face.edges, face.normal),
            key=lambda e: calc_edge_median(e).z,
        )
        bmesh.ops.translate(bm, vec=-face.normal * extrude_depth, verts=top_edge.verts)


def subdivide_face_into_vertical_segments(bm, face, segments):
    """Cut a face(quad) vertically into multiple faces
    """
    res = bmesh.ops.subdivide_edges(
        bm, edges=filter_vertical_edges(face.edges, face.normal), cuts=segments
    ).get("geom_inner")

    return list({f for e in filter_geom(res, BMEdge) for f in e.link_faces})


def double_and_make_even(value):
    """multiply a number by 2 and make it even
    """
    double = value * 2
    return double if double % 2 == 0 else double + 1


def create_bar_from_face(bm, face, median, position, scale, depth, vertical=False):
    """Create bar geometry from a face
    """
    dup = duplicate_face_translate_scale(bm, face, position, scale, median).get("geom")
    edges = [filter_horizontal_edges, filter_vertical_edges][vertical](
        filter_geom(dup, BMEdge), face.normal
    )
    extrude_edges_to_depth(bm, edges, depth)
import math
import bmesh
from bmesh.types import BMFace, BMEdge, BMVert
from mathutils import Vector, Matrix, Quaternion
from ...utils import (
    clamp,
    FaceMap,
    sort_edges,
    edge_vector,
    filter_geom,
    map_new_faces,
    subdivide_edges,
    calc_edge_median,
    filter_vertical_edges,
    add_facemap_for_groups,
)


def create_railing(bm, faces, prop, normal):
    vertical_edges = list({e for f in faces for e in filter_vertical_edges(f.edges, f.normal)})
    add_facemap_for_groups(FaceMap.RAILING_POSTS)
    make_corner_posts(bm, vertical_edges, prop, faces[0].normal)
    for f in faces:
        make_fill(bm, f, prop)
    bmesh.ops.delete(bm, geom=faces, context="FACES")  # delete reference faces


@map_new_faces(FaceMap.RAILING_POSTS)
def make_corner_posts(bm, edges, prop, up):
    for edge in edges:
        ret = bmesh.ops.duplicate(bm, geom=[edge])
        dup_edge = filter_geom(ret["geom"], BMEdge)[0]
        edge_to_cylinder(bm, dup_edge, prop.corner_post_width/2, up, fill=True)


def make_fill(bm, face, prop):
    # duplicate original face and resize
    ret = bmesh.ops.duplicate(bm, geom=[face])
    dup_face = filter_geom(ret["geom"], BMFace)[0]
    vertical = filter_vertical_edges(dup_face.edges, dup_face.normal)
    non_vertical = [e for e in dup_face.edges if e not in vertical]
    top_edge = sort_edges(non_vertical, Vector((0., 0., -1.)))[0]
    bmesh.ops.translate(bm, verts=top_edge.verts, vec=Vector((0., 0., -1.))*prop.corner_post_width/2)

    # create railing top
    add_facemap_for_groups(FaceMap.RAILING_RAILS)
    create_railing_top(bm, top_edge, prop)

    # create fill
    if prop.fill == "POSTS":
        create_fill_posts(bm, dup_face, prop)
    elif prop.fill == "RAILS":
        create_fill_rails(bm, dup_face, prop)
    elif prop.fill == "WALL":
        add_facemap_for_groups(FaceMap.RAILING_WALLS)
        create_fill_walls(bm, dup_face, prop)


@map_new_faces(FaceMap.RAILING_RAILS)
def create_railing_top(bm, top_edge, prop):
    ret = bmesh.ops.duplicate(bm, geom=[top_edge])
    top_dup_edge = filter_geom(ret["geom"], BMEdge)[0]
    horizon = edge_vector(top_dup_edge).cross(Vector((0., 0., 1.)))
    up = edge_vector(top_dup_edge)
    up.rotate(Quaternion(horizon, math.pi/2).to_euler())

    if not edge_vector(top_dup_edge).z:
        scale_railing_edge(bm, top_dup_edge, prop.corner_post_width)

    edge_to_cylinder(bm, top_dup_edge, prop.corner_post_width/2, up)
    bmesh.ops.translate(bm, verts=top_edge.verts, vec=Vector((0., 0., -1.))*prop.corner_post_width/2)


@map_new_faces(FaceMap.RAILING_POSTS)
def create_fill_posts(bm, face, prop):
    vertical_edges = filter_vertical_edges(face.edges, face.normal)
    sorted_edges = sort_edges([e for e in face.edges if e not in vertical_edges], Vector((0., 0., -1.)))

    # create posts
    post_size = min(prop.post_fill.size, prop.corner_post_width)

    top_edge = sorted_edges[0]
    bottom_edge = sorted_edges[-1]
    top_edge_vector = top_edge.verts[0].co - top_edge.verts[1].co
    top_edge_vector.z = 0
    n_posts = round(top_edge_vector.length*prop.post_fill.density/post_size)
    dir = edge_vector(top_edge)
    if n_posts != 0:
        inner_edges = subdivide_edges(bm, [top_edge, bottom_edge], dir, widths=[1.]*(n_posts+1))
        for edge in inner_edges:
            ret = bmesh.ops.duplicate(bm, geom=[edge])
            dup_edge = filter_geom(ret["geom"], BMEdge)[0]
            up = face.normal
            edge_to_cylinder(bm, dup_edge, post_size/2, up)
        # delete reference faces
        dup_faces = list({f for e in inner_edges for f in e.link_faces})
        bmesh.ops.delete(bm, geom=dup_faces, context="FACES")
    else:
        # delete reference faces
        bmesh.ops.delete(bm, geom=[face], context="FACES")


@map_new_faces(FaceMap.RAILING_RAILS)
def create_fill_rails(bm, face, prop):
    # create rails
    rail_size = min(prop.rail_fill.size, prop.corner_post_width)

    vertical_edges = filter_vertical_edges(face.edges, face.normal)
    n_rails = math.floor(vertical_edges[0].calc_length()*prop.rail_fill.density/rail_size)
    if n_rails != 0:
        inner_edges = subdivide_edges(bm, vertical_edges, Vector((0., 0., 1.)), widths=[1.]*(n_rails+1))
        for edge in inner_edges:
            ret = bmesh.ops.duplicate(bm, geom=[edge])
            dup_edge = filter_geom(ret["geom"], BMEdge)[0]
            up = face.normal
            if not edge_vector(dup_edge).z:
                scale_railing_edge(bm, dup_edge, prop.corner_post_width)
            edge_to_cylinder(bm, dup_edge, rail_size/2, up)
        # delete reference faces
        dup_faces = list({f for e in inner_edges for f in e.link_faces})
        bmesh.ops.delete(bm, geom=dup_faces, context="FACES")
    else:
        # delete reference faces
        bmesh.ops.delete(bm, geom=[face], context="FACES")


@map_new_faces(FaceMap.RAILING_WALLS)
def create_fill_walls(bm, face, prop):
    # create walls
    wall_size = clamp(prop.wall_fill.width, 0.001, prop.corner_post_width)

    ret = bmesh.ops.duplicate(bm, geom=[face])
    dup_face = filter_geom(ret["geom"], BMFace)[0]
    bmesh.ops.translate(bm, verts=dup_face.verts, vec=-face.normal*wall_size/2)
    ret = bmesh.ops.extrude_edge_only(bm, edges=dup_face.edges)
    verts = filter_geom(ret["geom"], BMVert)
    bmesh.ops.translate(bm, verts=verts, vec=face.normal*wall_size)
    bmesh.ops.contextual_create(bm, geom=verts)

    # delete reference faces and hidden faces
    bmesh.ops.delete(bm, geom=[face] + filter_geom(ret['geom'], BMFace), context="FACES")


def edge_to_cylinder(bm, edge, radius, up, n=4, fill=False):
    edge_vec = edge_vector(edge)
    theta = (n-2)*math.pi/n
    length = 2 * radius * math.tan(theta/2)

    dir = up.copy()
    dir.rotate(Quaternion(edge_vec, -math.pi+theta/2).to_euler())
    bmesh.ops.translate(bm, verts=edge.verts, vec=dir*radius/math.sin(theta/2))
    all_verts = [v for v in edge.verts]
    dir.rotate(Quaternion(edge_vec, math.pi-theta/2).to_euler())
    for i in range(0, n):
        ret = bmesh.ops.extrude_edge_only(bm, edges=[edge])
        edge = filter_geom(ret["geom"], BMEdge)[0]
        bmesh.ops.translate(bm, verts=edge.verts, vec=dir*length)
        dir.rotate(Quaternion(edge_vec, math.radians(360/n)).to_euler())
        all_verts += edge.verts

    bmesh.ops.remove_doubles(bm, verts=all_verts, dist=0.001)

    if fill:  # fill holes
        valid_verts = [v for v in all_verts if v.is_valid]
        sorted_edges = sort_edges({e for v in valid_verts for e in v.link_edges}, edge_vec)
        top_edges = sorted_edges[-n:]
        bottom_edges = sorted_edges[:n]
        bmesh.ops.holes_fill(bm, edges=top_edges)
        bmesh.ops.holes_fill(bm, edges=bottom_edges)


def scale_railing_edge(bm, edge, amount):
    edge_len = edge.calc_length()
    edge_scale = (edge_len - amount) / edge_len
    bmesh.ops.scale(bm,
                    verts=edge.verts,
                    vec=Vector((1.,1.,1.))*edge_scale,
                    space=Matrix.Translation(-calc_edge_median(edge)))
import bpy

from .railing_props import PostFillProperty, RailFillProperty, WallFillProperty, RailProperty

classes = (
    PostFillProperty,
    RailFillProperty,
    WallFillProperty,
    RailProperty,
)


def register_railing():
    for cls in classes:
        bpy.utils.register_class(cls)


def unregister_railing():
    for cls in classes:
        bpy.utils.unregister_class(cls)
import bpy
from bpy.props import (
    FloatProperty, EnumProperty, BoolProperty, PointerProperty
)


def get_density(self):
    return self.get("density", self.get("initial_density", 0.2))


def set_density(self, value):
    self["density"] = value


class PostFillProperty(bpy.types.PropertyGroup):
    size: FloatProperty(
        name="Size",
        min=0.01,
        max=100.0,
        default=0.05,
        description="Size of each post",
    )

    density: FloatProperty(
        name="Density",
        min=0.0,
        max=1.0,
        get=get_density,
        set=set_density,
        description="Number of posts along each edge",
    )

    def init(self, initial_density):
        self["initial_density"] = initial_density

    def draw(self, context, layout):
        row = layout.row(align=True)
        row.prop(self, "density")
        row.prop(self, "size")


class RailFillProperty(bpy.types.PropertyGroup):
    size: FloatProperty(
        name="Rail Size",
        min=0.01,
        max=100.0,
        default=0.05,
        description="Size of each rail",
    )

    density: FloatProperty(
        name="Rail Density",
        min=0.0,
        max=1.0,
        default=0.3,
        description="Number of rails over each edge",
    )

    def draw(self, context, layout):
        row = layout.row(align=True)
        row.prop(self, "density")
        row.prop(self, "size")


class WallFillProperty(bpy.types.PropertyGroup):
    width: FloatProperty(
        name="Wall Width",
        min=0.0,
        max=100.0,
        default=0.075,
        description="Width of each wall",
    )

    def draw(self, context, layout):
        row = layout.row(align=True)
        row.prop(self, "width")


class RailProperty(bpy.types.PropertyGroup):

    fill_types = [
        ("POSTS", "Posts", "", 0),
        ("RAILS", "Rails", "", 1),
        ("WALL",  "Wall",  "", 2),
    ]

    fill: EnumProperty(
        name="Fill Type",
        items=fill_types,
        default="POSTS",
        description="Type of railing",
    )

    corner_post_width: FloatProperty(
        name="Width",
        min=0.01,
        max=100.0,
        default=0.1,
        description="Width of each corner post",
    )

    corner_post_height: FloatProperty(
        name="Height",
        min=0.01,
        max=100.0,
        default=0.7,
        description="Height of each corner post",
    )

    has_corner_post: BoolProperty(
        name="Corner Posts",
        default=True,
        description="Whether the railing has corner posts",
    )

    offset: FloatProperty(
        name="Offset",
        default=0.05,
        description="Railings offset",
    )

    post_fill: PointerProperty(type=PostFillProperty)
    rail_fill: PointerProperty(type=RailFillProperty)
    wall_fill: PointerProperty(type=WallFillProperty)

    def init(self, stair_step_width=None, step_count=None):
        if stair_step_width and self.fill == "POSTS":
            if step_count > 1:
                initial_density = (self.post_fill.size * (step_count-1))/(stair_step_width*step_count)
            else:
                initial_density = (self.post_fill.size - 0.001)/(2*stair_step_width)  # just enough to have 0 post on stairs
            self.post_fill.init(initial_density=initial_density)

    def draw(self, context, layout):

        row = layout.row()
        row.prop(self, "offset", text="Railing Offset")

        row = layout.row()
        row.prop_menu_enum(self, "fill", text=self.fill.title())

        {
            "POSTS" : self.post_fill,
            "RAILS" : self.rail_fill,
            "WALL"  : self.wall_fill
        }.get(self.fill).draw(context, layout)

        layout.label(text="Corner Posts")
        row = layout.row(align=True)
        row.prop(self, "corner_post_width")
        row.prop(self, "corner_post_height")
import bmesh
from ..frame import add_frame_depth
from ..window.window_types import fill_window_face

from ..arch import (
    fill_arch,
    create_arch,
    add_arch_depth,
)
from ..door.door_types import (
    add_door_depth,
    create_door_fill,
)
from ...utils import (
    FaceMap,
    local_xyz,
    valid_ngon,
    get_top_faces,
    get_top_edges,
    popup_message,
    map_new_faces,
    add_faces_to_map,
    calc_face_dimensions,
    subdivide_face_horizontally,
    subdivide_face_vertically,
)


def create_multigroup(bm, faces, prop):
    """ Create multigroup from face selection
    """

    for face in faces:
        if not valid_ngon(face):
            popup_message("Multigroup creation not supported for non-rectangular n-gon!", "Ngon Error")
            return False

        face.select = False

        array_faces = subdivide_face_horizontally(bm, face, widths=[prop.size_offset.size.x]*prop.count)
        for aface in array_faces:
            face = create_multigroup_split(bm, aface, prop.size_offset.size, prop.size_offset.offset)
            doors, windows, arch = create_multigroup_frame(bm, face, prop)
            for door in doors:
                create_door_fill(bm, door, prop)
            for window in windows:
                fill_window_face(bm, window, prop)
            if prop.add_arch:
                fill_arch(bm, arch, prop)
    return True


@map_new_faces(FaceMap.WALLS)
def create_multigroup_split(bm, face, size, offset):
    """ Use properties from SizeOffset to subdivide face into regular quads
    """

    wall_w, wall_h = calc_face_dimensions(face)
    # horizontal split
    h_widths = [wall_w/2 + offset.x - size.x/2, size.x, wall_w/2 - offset.x - size.x/2]
    h_faces = subdivide_face_horizontally(bm, face, h_widths)
    # vertical split
    v_width = [wall_h/2 + offset.y + size.y/2, wall_h/2 - offset.y - size.y/2]
    v_faces = subdivide_face_vertically(bm, h_faces[1], v_width)

    return v_faces[0]


def create_multigroup_frame(bm, face, prop):
    """ Extrude and inset face to make multigroup frame
    """
    normal = face.normal.copy()

    dws = parse_components(prop.components)
    door_faces, window_faces, frame_faces = make_multigroup_insets(bm, face, prop.size_offset.size, prop.frame_thickness, dws)
    arch_face = None

    # create arch
    if prop.add_arch:
        dw_count = count(dws)
        top_edges = get_top_edges({e for f in get_top_faces(frame_faces, n=2*dw_count+1)[-dw_count-1:] for e in f.edges}, n=dw_count+1)
        if dw_count == 1:
            frame_faces.remove(get_top_faces(frame_faces).pop()) # remove top face from frame_faces
        arch_face, arch_frame_faces = create_arch(bm, top_edges, frame_faces, prop.arch, prop.frame_thickness, local_xyz(face))
